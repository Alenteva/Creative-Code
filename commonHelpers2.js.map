{"version":3,"file":"commonHelpers2.js","sources":["../src/js/shopping-list-help.js"],"sourcesContent":["// import tuiPagination from 'tui-pagination'; // Імпортуємо бібліотеку пагінації\nconst KEY = 'arrayBooksShop';\nconst bookListContainer = document.querySelector('.marcup');\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  //=============================================================================================================\n\n\n\n  const books = loadFromLS(); // присвоємо змінній функцію для отримання книг з localStorage\n  console.log(books);\n\n  const btnDeleteBook = document.querySelectorAll('.shoplist-btn-delete'); // знайшли всі кнопки видалення\n  console.log(btnDeleteBook);\n\n  console.log(localStorage);\n  // Получение buy_links из Local Storage\n  const buy_links = JSON.parse(localStorage.getItem('buy_links')) || [];\n\n  //==================== логіка відкриття вікна з книжками або без та видалення книжок по click\n  if (books.length === 0) {\n    bookListContainer.innerHTML = emptyMessage();\n  } else {\n    renderBooks(books);\n\n    deleteUpdateLs();\n  }\n\n  //==================Всі функціі =================================\n  // функція видалення li з DOMдерева та LS\n  async function deleteUpdateLs() {\n    btnDeleteBook.forEach(btn => {\n      btn.addEventListener('click', async event => {\n        const deleteLi = btn.querySelector('li'); //знайдений li в DOM дереві\n        selectColor(event);\n        deleteLi.remove(); //видаляється  li на кнопку якої натиснуто\n\n        const button = event.currentTarget; // Отримання поточної кнопки, на яку було натиснуто, з об'єкта події event.\n        const bookIdToDelete = button.dataset.bookId; //Отримання id книги, пов'язаної з цією кнопкою, з атрибуту data-bookId.\n        const localStorageData = JSON.parse(localStorage.getItem('KEY')); // Отримання даних про книги з локального сховища браузера з ключем 'idBooks'.\n        //Фільтрація цих даних таким чином, щоб вони не містили об'єкт з id, який ми хочемо видалити.\n        const updatedLocalStorageData = localStorageData.filter(\n          item => item._id !== bookIdToDelete\n        );\n\n        localStorage.setItem(\n          'KEY',\n          JSON.stringify(updatedLocalStorageData) // Збереження оновлених даних про книги до локального сховища браузера з ключем 'idBooks'.\n        );\n\n        // Видалення елементу з DOM\n        await new Promise(resolve => setTimeout(resolve, 1000)); // Чекаємо 1 секунду перед оновленням списку\n        renderBooks(updatedLocalStorageData); //Оновлення відображення списку книг на сторінці за допомогою функції renderBooks, передаючи їй оновлені дані про книги.\n      });\n    });\n  }\n\n  //================= функція перевірки натискання саме на кнопки ==========================\n  function selectColor(event) {\n    if (event.target.nodeName !== 'BUTTON') {\n      return;\n    }\n  }\n\n  // ================= функція відображення трьох книжок на сторінці==================\n  function renderBooks(books) {\n    const limitedBooks = books.slice(0, 3);\n\n    const buy_links = JSON.parse(localStorage.getItem('buy_links')) || [];\n\n    const amazonLink = buy_links.find(link => link.name === 'Amazon'); // помилка відсутньості buy_links на сервері\n    // Проверяем, существует ли ссылка на Amazon в buy_links\n    if (amazonLink) {\n      const bookItemsHTML = limitedBooks\n        .map(book => {\n          return `<li>${templateBook(book)}</li>`;\n        })\n        .join('');\n\n      const bookListContainer = document.querySelector('.marcup');\n      bookListContainer.innerHTML = `<ul>${bookItemsHTML}</ul>`;\n    } else {\n      console.log('Ссылка на Amazon не найдена в localStorage.');\n    }\n\n    // Встановлення обробників подій для нових кнопок видалення\n    const btnDeleteBook = document.querySelectorAll('.shoplist-btn-delete');\n    btnDeleteBook.forEach(btn => {\n      btn.addEventListener('click', deleteBookAndUpdateLs);\n    });\n  }\n\n  // ========================= функція видалення книги та оновлення\n  function deleteBookAndUpdateLs(event) {\n    const button = event.currentTarget; // Отримати кнопку, на яку натиснуто\n    const bookIdToDelete = button.dataset.bookId; // Отримати id книги для видалення\n\n    // Отримати дані з localStorage\n    let localStorageData = JSON.parse(localStorage.getItem('KEY'));\n\n    // Знайти індекс книги для видалення за її id\n    const indexToDelete = localStorageData.findIndex(\n      item => item._id === bookIdToDelete\n    );\n\n    if (indexToDelete !== -1) {\n      localStorageData.splice(indexToDelete, 1); // Видалити книгу з масиву\n      localStorage.setItem('KEY', JSON.stringify(localStorageData)); // Оновити дані в localStorage\n      renderBooks(localStorageData); // Оновити список книг на сторінці\n      checkAndUpdateEmptyMessage(); // Перевірити, чи пусте локальне сховище та відображення відповідного повідомлення\n    }\n  }\n\n  // ================функція для отримання книг з localStorage\n  function loadFromLS() {\n    const booksJSON = localStorage.getItem('KEY') || '[]';\n    return JSON.parse(booksJSON);\n  }\n\n  // ====Функція для перевірки пустоти локального сховища та відображення відповідного повідомлення\n\n  function checkAndUpdateEmptyMessage() {\n    const localStorageData = JSON.parse(localStorage.getItem('KEY'));\n    if (!localStorageData || localStorageData.length === 0) {\n      bookListContainer.innerHTML = emptyMessage();\n    }\n  }\n\n  //   =============== функція рендеру розмітки кратинки однієї книжки в LS ========\n\n  function templateBook(book) {\n    const {\n      _id,\n      book_image,\n      title,\n      list_name,\n      description,\n      author,\n      buy_links,\n    } = book;\n\n    return `\n   <div class=\"shoplist-error container\">\n\n<div class=\"shoplist\">\n            <h1 class=\"shoplist-title\">\n              Shopping\n              <span class=\"shoplist-title-span\"> List</span>\n            </h1>\n          </div>\n      <div id=\"${_id}\"></div>   \n=======\n\n      \n\n        <img src=\"${book_image}\" alt=\"${title}\" class=\"shoplist-bookcover\"/>\n        <div class=\"shoplist\">\n          <h2 class=\"shoplist-title-book\">${title}</h2>\n          <p class=\"shoplist-category-book\">${list_name}</p>\n          <p class=\"shoplist-description\">${description}</p>\n          <p class=\"shoplist-author\">${author}</p>\n        </div>\n         <div class=\"logo-book\">\n        <button id=\"deleteBtn-${_id}\" type=\"button\" class=\"shoplist-btn-delete\" data-book-id=\"${_id}\">\n          <svg class=\"shoplist-btn-icon\">\n            <use href=\" ./images/icon.svg#icon-free-icon-trash\"></use>\n          </svg>\n        </button>\n               <ul class=\"shoplist-links\">\n  <li class=\"shoplist-item\"><a href=\"${\n    buy_links.find(link => link.name === 'Amazon').url\n  }\" target=\"_blank\"><img src=\"../images/shopping-list/amazon.png\" alt=\"amazon logo\" class=\"amazon\"></a></li>\n          <li><img src=\"../images/shopping-list/book.png\" alt=\"open book\" class=\"apple-book\"></li>\n        </ul>\n        </div>\n      </div>\n\n    `;\n  }\n\n  //=============== функція рендеру розмітки вікна, якщо немає книжок в LS ========\n\n  function emptyMessage() {\n    return `\n    <div class=\"shoplist-error container\">\n      </div>\n      <div class=\"shoplist-error\">\n        <h1 class=\"shoplist-title-error\">\n          Shopping\n          <span class=\"shoplist-title-span\">List</span>\n        </h1>\n        <div class=\"shoplist-error-content\">\n          <p class=\"shoplist-error-text\">This page is empty, add some books and proceed to order.</p>\n          <img src=\"../images/shopping-list/books-dt-2x.png\" alt=\"books\" class=\"shoplist-error-books\">\n        </div>\n      </div>\n    </div>\n  `;\n  }\n});\n\nasync function fetchAndInsertHtml() {\n  try {\n    const response = await fetch('../partials/home.html');\n    const html = await response.text();\n    const shoppingList = document.querySelector('.shopping-list');\n    shoppingList.insertAdjacentHTML('afterbegin', html);\n  } catch (error) {\n    console.error('Error fetching or inserting HTML:', error);\n  }\n}\n"],"names":["bookListContainer","books","loadFromLS","btnDeleteBook","emptyMessage","renderBooks","deleteUpdateLs","btn","event","deleteLi","selectColor","bookIdToDelete","updatedLocalStorageData","item","resolve","limitedBooks","link","bookItemsHTML","book","templateBook","deleteBookAndUpdateLs","localStorageData","indexToDelete","checkAndUpdateEmptyMessage","booksJSON","_id","book_image","title","list_name","description","author","buy_links"],"mappings":"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"}